#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of the Four-Player Chess project, a four-player chess GUI.
#
# Copyright (C) 2018, GammaDeltaII
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from PyQt5.QtWidgets import QMainWindow, QSizePolicy, QLayout, QListWidget, QListWidgetItem, QListView, QFrame, \
    QFileDialog, QMenu, QAction, QDialog, QDialogButtonBox, QScrollArea, QWidget, QVBoxLayout, QLabel, QMessageBox
from PyQt5.QtCore import Qt, QSize, QPoint, QRect, QSettings, QUrl, QTimer
from PyQt5.QtGui import QIcon, QColor, QFont, QFontMetrics, QPainter, QDesktopServices
from ui.mainwindow import Ui_MainWindow
from ui.settings import Ui_Preferences
from ui.infodialog import Ui_InfoDialog
from gui.algorithm import Teams
from gui.view import Comment
from gui.sound_manager import SoundManager
from gui.promotion_dialog import PromotionDialog
from urllib import request
import certifi
from re import compile
from pkg_resources import parse_version
from distutils.util import strtobool

# Load settings
COM = '4pc'
APP = '4PlayerChess'
SETTINGS = QSettings(COM, APP)

# Semantic versioning: N.N.N-{alpha|beta|rc}.N
MAJOR = str(0)
MINOR = str(10)
PATCH = str(0)
PRE_RELEASE = False * ('-' + 'alpha' + str(1))  # alpha, beta or rc (= release candidate)
VERSION = MAJOR + '.' + MINOR + '.' + PATCH + PRE_RELEASE


class MainWindow(QMainWindow, Ui_MainWindow):
    """The application main window. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self, actors, moves):
        super().__init__()
        self.setupUi(self)

        # Show license notice
        # self.statusbar.showMessage(APP + '. Copyright (C) 2018, GammaDeltaII (GNU GPL-3.0-or-later)', 5000) # 상태바 숨김으로 주석 처리

        # Initialize timer variables - 타이머 UI가 제거되었으므로 관련 코드 주석 처리
        # self.player_times = {
        #     'r': 600,  # 10 minutes in seconds
        #     'b': 600,
        #     'y': 600,
        #     'g': 600
        # }
        # self.timer_labels = {}
        # self.game_timer = QTimer(self)
        # self.game_timer.timeout.connect(self.update_timer)
        # self.game_timer.start(1000)  # Update every second

        # Create timer labels - 타이머 UI가 제거되었으므로 관련 코드 주석 처리
        # self.create_timer_labels()

        # Create algorithm instance (view instance is already created in UI code)
        self.algorithm = Teams(actors)

        # Initialize sound manager
        self.sound_manager = SoundManager()
        
        # Connect sound manager to algorithm for check/checkmate sounds
        self.algorithm.sound_manager = self.sound_manager

        # if there are moves to be played, store them
        self.moves = moves

        # Create comment label - comment 관련 위젯도 중앙 위젯 설정으로 인해 숨겨짐
        # self.comment = Comment()
        # self.comment.setParent(self.moveListWidget)
        # self.comment.setEnabled(False)
        # self.comment.move(self.commentField.parent().pos())
        # self.comment.show()

        # Set piece icons
        pieces = ['rP', 'rN', 'rR', 'rB', 'rQ', 'rK',
                  'bP', 'bN', 'bR', 'bB', 'bQ', 'bK',
                  'yP', 'yN', 'yR', 'yB', 'yQ', 'yK',
                  'gP', 'gN', 'gR', 'gB', 'gQ', 'gK']
        for piece in pieces:
            self.view.setPiece(piece, QIcon('resources/img/pieces/' + piece + '.svg'))

        # Configure self.view to be the main, expanding content
        self.view.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        # self.view.setSquareSize(QSize(50, 50)) # 이 라인을 주석 처리 또는 삭제

        # Set self.view as the central widget
        self.setCentralWidget(self.view)

        # 전체 화면으로 설정
        self.showFullScreen()

        # Hide other main window components
        if self.menuBar():
            self.menuBar().hide()
        # if self.statusBar(): # 상태바는 이미 위에서 주석 처리됨
        #     self.statusBar().hide()

        # Connect signals (타이머 관련 시그널 연결은 주석 처리)
        self.view.clicked.connect(self.viewClicked)
        self.algorithm.boardChanged.connect(self.view.setBoard)
        self.algorithm.currentPlayerChanged.connect(self.view.highlightPlayer)
        self.algorithm.currentPlayerChanged.connect(self.view.highlightChecks)
        self.algorithm.currentPlayerChanged.connect(self.view.setCurrentPlayer)
        self.algorithm.moveTextChanged.connect(self.updateMoveList) # updateMoveList도 숨겨진 위젯을 다루므로 주석처리 고려
        self.algorithm.selectMove.connect(self.selectMove) # moveListWidget 관련 기능 주석처리 고려
        self.algorithm.removeMoveSelection.connect(self.removeMoveSelection) # moveListWidget 관련 기능 주석처리 고려
        self.algorithm.fen4Generated.connect(self.fenField.setPlainText) # fenField 숨겨짐
        self.algorithm.pgn4Generated.connect(self.pgnField.setPlainText) # pgnField 숨겨짐
        self.algorithm.removeHighlight.connect(self.view.removeHighlightsOfColor)
        self.view.playerNameEdited.connect(self.algorithm.updatePlayerNames)
        self.view.playerRatingEdited.connect(self.algorithm.updatePlayerRating)
        self.algorithm.playerNamesChanged.connect(self.view.setPlayerNames)
        self.algorithm.playerRatingChanged.connect(self.view.setPlayerRating)
        self.algorithm.addHighlight.connect(self.addHighlight)
        self.view.dragStarted.connect(self.selectDragStartSquare)
        self.view.pieceMoved.connect(self.movePiece)
        # self.commentField.focusOutEvent = lambda event: self.setComment() # commentField 숨겨짐
        self.algorithm.cannotReadPgn4.connect(self.pgnParseError)
        self.algorithm.gameOver.connect(self.show_game_over)
        self.algorithm.pawnPromotionRequested.connect(self.show_promotion_dialog)

        # Connect menu actions (메뉴바가 숨겨졌으므로, 메뉴 액션 연결도 필요 없을 수 있음)
        # ... (기존 메뉴 액션 연결 코드) ...

        # Connect button actions (대부분의 버튼이 숨겨졌으므로, 관련 연결 코드 주석 처리 필요)
        # ... (기존 버튼 액션 연결 코드) ...
        # self.comment.clicked.connect(self.editComment) # comment 숨겨짐

        # Start new game
        self.algorithm.newGame()

        # Start BGM
        self.sound_manager.start_bgm()

        # Initialize objects
        self.clickPoint = QPoint()
        self.selectedSquare = 0
        self.moveHighlight = 0
        
        # 게임 종료 타이머 추가
        self.game_exit_timer = QTimer(self)
        self.game_exit_timer.setSingleShot(True)
        self.game_exit_timer.timeout.connect(self.close)

        # Game loop timer (타이머 기능 제거로 주석 처리)
        # self.game_loop_timer = QTimer(self)
        # self.game_loop_timer.setSingleShot(True)
        # self.algorithm.currentPlayerChanged.connect(self.delayed_game_loop)
        # self.game_loop_timer.timeout.connect(self.game_loop)
        # self.game_loop_timer.start(100)

        # Connect timer reset to new game action (타이머 기능 제거로 주석 처리)
        # self.actionNew_Game.triggered.connect(self.reset_timers)
        # self.boardResetButton.clicked.connect(self.reset_timers)

        # Print keyboard shortcuts info
        print("\n=== 체스 게임 키보드 단축키 ===")
        print("S: 체스 말 놓는 소리 켜기/끄기")
        print("B: 중세 BGM 켜기/끄기")
        print("M: BGM 일시정지/재개")
        print("+/=: BGM 볼륨 증가")
        print("-: BGM 볼륨 감소")
        print("방향키: 게임 진행/되돌리기")
        print("==============================\n")

    # def delayed_game_loop(self): # 타이머 기능 제거로 주석 처리
    #     """Delays the game loop to ensure proper timing."""
    #     timer = QTimer()
    #     timer.setSingleShot(True)
    #     timer.timeout.connect(self.game_loop)
    #     self.game_loop_timer.start(100)

    # def game_loop(self): # 타이머 기능 제거로 주석 처리
    #     """Handles the game loop for AI moves."""
    #     if self.moves != None:
    #         for move in self.moves:
    #             self.algorithm.makeMove(*move)
    #         self.moves = None
    #     if self.algorithm.currentPlayer in self.algorithm.aiActorPos:
    #         for actor in self.algorithm.actors:
    #             if self.algorithm.currentPlayer == actor[0]:
    #                 fromFile, fromRank, toFile, toRank = actor[1].make_move(self.algorithm.board)
    #                 self.algorithm.makeMove(fromFile, fromRank, toFile, toRank)
    #     if self.algorithm.currentPlayer == self.algorithm.NoPlayer:
    #         curr_player = self.algorithm.playerQueue[0]
    #         if curr_player in self.algorithm.aiActorPos:
    #             for actor in self.algorithm.actors:
    #                 if curr_player == actor[0]:
    #                     self.algorithm.promoteValue(actor[1].promote_pawn(self.algorithm.board, self.algorithm.promoteSpace))
    
    # 타이머 및 관련 UI가 제거되었으므로 다음 함수들도 주석 처리합니다.
    # def create_timer_labels(self):
    # ... (함수 내용) ...
    # def update_timer(self):
    # ... (함수 내용) ...
    # def reset_timers(self):
    # ... (함수 내용) ...

    # updateMoveList, selectMove, removeMoveSelection 등도 숨겨진 위젯을 다루므로
    # 필요 없다면 주석 처리하거나, self.view만 사용하는 형태로 수정해야 합니다.
    # 예시:
    def updateMoveList(self, moveText): # 실제로는 moveListWidget이 없으므로 이 함수는 호출되지 않거나, 다른 방식으로 로그를 처리해야 함
        # self.moveListWidget.addItem(RowItem(moveText))
        # self.moveListWidget.scrollToBottom()
        print(f"Move: {moveText}") # 간단히 콘솔에 출력하는 예시

    def selectMove(self, key):
        # item = self.moveListWidget.item(key)
        # if item:
        #     item.setSelected(True)
        #     self.moveListWidget.scrollToItem(item)
        print(f"Select move: {key}") # 콘솔 출력 예시

    def removeMoveSelection(self):
        # for item in self.moveListWidget.selectedItems():
        #     item.setSelected(False)
        print("Remove move selection") # 콘솔 출력 예시

    def checkUpdate(self):
        """Checks if update is available and shows update dialog."""
        with request.urlopen('https://github.com/GammaDeltaII/4PlayerChess/releases/latest', cafile=certifi.where()) \
                as response:
            url = response.geturl()
        regex = compile('[0-9]+.[0-9]+.[0-9]+')
        index = regex.search(url).span()
        latest = url[index[0]:index[1]]
        updateDialog = InfoDialog()
        updateDialog.setWindowTitle('Check for Updates...')
        if parse_version(latest) > parse_version(VERSION):
            updateDialog.label.setText("""
                <center>
                <p style = 'font-size: 20px;'><b>Update available!</b></p>
                <br><br>
                <a href = '""" + url + """' style = 'color:grey;'>4PlayerChess (""" + latest + """)</a>
                <br>
                <small>
                <p>(Current version: """ + VERSION + """)</p>
                </small>
                </center>
                """)
        else:
            updateDialog.label.setText("""
                <center>
                <p style = 'font-size: 20px;'><b>No update available.</b></p>
                <br><br>
                Current version (""" + VERSION + """) is latest version.
                </center>
                """)
        updateDialog.exec_()

    def about(self):
        """Shows application info dialog."""
        aboutDialog = InfoDialog()
        aboutDialog.setWindowTitle('About 4PlayerChess')
        aboutDialog.label.setText("""
            <center>
            <p><b>4PlayerChess</b></p>
            <small>
            <p>Version """ + VERSION + """</p>
            <p>Copyright &copy; 2018, GammaDeltaII</p>
            <p>This software is licensed under the GNU General Public License v3.0 or later<br>
            <a href = 'https://www.gnu.org/licenses/gpl-3.0' style = 'color:grey;'>
            https://www.gnu.org/licenses/gpl-3.0</a></p>
            </small>
            </center>
            """)
        aboutDialog.exec_()

    def aboutPyQt(self):
        """Shows PyQt info dialog."""
        aboutPyQt = InfoDialog()
        aboutPyQt.resize(400, 320)
        aboutPyQt.label.resize(300, 140)
        buttonPos = aboutPyQt.buttonBox.pos()
        aboutPyQt.buttonBox.move(int(aboutPyQt.width() / 2 - aboutPyQt.buttonBox.width() / 2),
                                 buttonPos.y() + (aboutPyQt.height() - 300))
        aboutPyQt.setWindowTitle('About PyQt')
        aboutPyQt.label.setText("""
            <center>
            <p><b>This software uses PyQt5</b></p>
            <small>
            <p>PyQt5 is a comprehensive set of Python bindings for Qt 5. PyQt brings together the Qt 
            C++ cross-platform application framework and the cross-platform interpreted language Python.</p>
            <p>PyQt is copyright &copy; <a href = 'https://www.riverbankcomputing.com/software/pyqt/' style = 
            'color:white;'>Riverbank Computing Ltd.</a></p>
            <p>Qt is copyright &copy; <a href = 'https://www.qt.io' style =
            'color:white;'>The Qt Company Ltd.</a></p>
            </small>
            </center>
            """)
        aboutPyQt.exec_()

    def quickReference(self):
        """Shows quick reference guide."""
        quickReferenceDialog = InfoDialog()
        quickReferenceDialog.resize(700, 700)
        quickReferenceDialog.label.setFixedWidth(quickReferenceDialog.width() - 100)
        scrollArea = QScrollArea(quickReferenceDialog)
        scrollArea.move(quickReferenceDialog.label.pos())
        labelSize = quickReferenceDialog.label.size()
        scrollArea.resize(labelSize.width() + 20, quickReferenceDialog.height() - 180)
        buttonPos = quickReferenceDialog.buttonBox.pos()
        quickReferenceDialog.buttonBox.move(quickReferenceDialog.width() / 2 - quickReferenceDialog.buttonBox.width()
                                            / 2, buttonPos.y() + (quickReferenceDialog.height() - 300))

        quickReferenceDialog.setWindowTitle('Quick Reference Guide')
        quickReferenceDialog.label.setText("""
            <center><h1>Quick Reference Guide</h1></center>
            <h3>Shortcuts</h3><small>(on Mac use &#8984; instead of Ctrl)</small>
            <table>
                <tr><td width = '50'>Ctrl+Q</td><td>Quit application</td></tr>
                <tr><td>Ctrl+N</td><td>New game</td></tr>
                <tr><td>Ctrl+O</td><td>Load game from PGN4 file</td></tr>
                <tr><td>Ctrl+S</td><td>Save game to PGN4 file</td></tr>
                <tr><td>Ctrl+C</td><td>Copy FEN4 to clipboard</td></tr>
                <tr><td>Ctrl+V</td><td>Paste FEN4 from clipboard</td></tr>
                <tr><td>Ctrl+L</td><td>Rotate board left (counterclockwise, next player)</td></tr>
                <tr><td>Ctrl+R</td><td>Rotate board right (clockwise, previous player)</td></tr>
                <tr><td>Ctrl+F</td><td>Flip board</td></tr>
                <tr><td>&rarr;</td><td>Go to next move</td></tr>
                <tr><td>&larr;</td><td>Go to previous move</td></tr>
                <tr><td>&uarr;</td><td>Go to first move</td></tr>
                <tr><td>&darr;</td><td>Go to last move</td></tr>
            </table>
            <h3>Arrows &amp; square highlights</h3>
            <ul>
                <li>Right-click on a square to highlight the square.</li>
                <li>Right-click and drag to draw arrows.</li>
                <li>Hold numeric key 0, 1, 2, 3 or 4 while clicking or dragging for orange (default), red, blue, yellow 
                or green, respectively.</li>
                <li>Left-click any empty square to remove all arrows and highlighted squares.</li>
                <li>Left-clicking any empty square while holding numeric key 0, 1, 2, 3 or 4 will remove all arrows and 
                square highlights of the respective color only.</li>
                <li>Drawing an existing arrow or square highlight again will remove it.</li>
            </ul>
            <h3>Move list</h3>
            <ul>
                <li>Left-click a move to go to that move.</li>
                <li>Right-click a move to delete the move or promote the variation it is part of.</li>
                <li>Enter a comment in the comment field to save a comment for the selected move.</li>
            </ul>
            <h3>Player names and rating</h3>
            <ul>
                <li>Click a player name to edit the name and rating. You can specify the rating by typing the name 
                followed by a space and then the rating.</li>
            </ul>
            <h3>Preferences</h3>
            <ul>
                <li>'Show mouseover coordinate' will display the coordinate of a square when moving the mouse over it.
                </li>
                <li>'Auto-change arrow color' will change the color of arrows and square highlights with the board 
                orientation, e.g. if the bottom player is red, the color will be red. If unchecked, the default color 
                will be orange.</li>
                <li>'Auto-rotate' will automatically rotate the board 90 degrees counterclockwise after each move. The 
                current player will always be at the bottom, unless the board is manually rotated, e.g. if the board is 
                manually flipped, the current player will always be at the top.</li>
                <li>'Use chess.com FEN4 and PGN4' enables loading and saving chess.com compatible FEN4 and PGN4. NOTE:
                chess.com does NOT currently support subvariations. If you have subvariations in your PGN4, the 
                chess.com analysis board will not be able to read it.</li>
                <li>Preferences are saved to a platform-specific preferences file, which is displayed in the status bar 
                at the bottom after saving.</li>
            </ul>
            """)
        quickReferenceDialog.label.adjustSize()
        scrollArea.setWidget(quickReferenceDialog.label)
        scrollArea.show()
        quickReferenceDialog.exec_()

    def reportBug(self):
        """Opens link to GitHub issues."""
        QDesktopServices().openUrl(QUrl('https://github.com/GammaDeltaII/4PlayerChess/issues'))

    def addHighlight(self, fromFile, fromRank, toFile, toRank, color):
        """Adds move highlight to board view."""
        fromSquare = self.view.SquareHighlight(fromFile, fromRank, color)
        self.view.addHighlight(fromSquare)
        toSquare = self.view.SquareHighlight(toFile, toRank, color)
        self.view.addHighlight(toSquare)

    def viewClicked(self, square):
        """Handles view click event to move clicked piece to clicked square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        if self.clickPoint.isNull():
            squareData = self.view.board.getData(square.x(), square.y())
            if squareData != ' ' and squareData[0] == self.algorithm.currentPlayer:
                self.clickPoint = square
                self.selectedSquare = self.view.SquareHighlight(square.x(), square.y(), color)
                self.view.addHighlight(self.selectedSquare)
                self.view.showLegalMoves()
        else:
            self.view.removeLegalMoveIndicators()
            moved = False
            if square != self.clickPoint:
                moved = self.algorithm.makeMove(self.clickPoint.x(), self.clickPoint.y(), square.x(), square.y())
            self.clickPoint = QPoint()
            if not moved:
                self.view.removeHighlight(self.selectedSquare)
            else:
                # Play chess move sound when piece is successfully moved
                self.sound_manager.play_move_sound()
                
                self.moveHighlight = self.view.SquareHighlight(square.x(), square.y(), color)
                self.view.addHighlight(self.moveHighlight)
                self.view.highlightChecks()
                # Remove highlights of next player
                if self.algorithm.currentPlayer == self.algorithm.Red:
                    color = QColor('#33bf3b43')
                elif self.algorithm.currentPlayer == self.algorithm.Blue:
                    color = QColor('#334185bf')
                elif self.algorithm.currentPlayer == self.algorithm.Yellow:
                    color = QColor('#33c09526')
                elif self.algorithm.currentPlayer == self.algorithm.Green:
                    color = QColor('#334e9161')
                else:
                    color = QColor('#00000000')
                self.view.removeHighlightsOfColor(color)
                self.moveHighlight = 0
            self.selectedSquare = 0

    def selectDragStartSquare(self, square):
        """Highlights the dragged piece origin square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        # Remove click highlight, if it exists
        if self.selectedSquare:
            self.view.removeHighlight(self.selectedSquare)
            self.clickPoint = QPoint()
            self.selectedSquare = 0
        squareData = self.view.board.getData(square.x(), square.y())
        if squareData != ' ' and squareData[0] == self.algorithm.currentPlayer:
            self.selectedSquare = self.view.SquareHighlight(square.x(), square.y(), color)
            self.view.addHighlight(self.selectedSquare)

    def movePiece(self, fromSquare, toSquare):
        """Handles piece drag event to move dragged piece to drop square."""
        if self.algorithm.currentPlayer == self.algorithm.Red:
            color = QColor('#33bf3b43')
        elif self.algorithm.currentPlayer == self.algorithm.Blue:
            color = QColor('#334185bf')
        elif self.algorithm.currentPlayer == self.algorithm.Yellow:
            color = QColor('#33c09526')
        elif self.algorithm.currentPlayer == self.algorithm.Green:
            color = QColor('#334e9161')
        else:
            color = QColor('#00000000')
        moved = self.algorithm.makeMove(fromSquare.x(), fromSquare.y(), toSquare.x(), toSquare.y())
        if not moved:
            self.view.removeHighlight(self.selectedSquare)
            self.view.maskedSquare = None
        else:
            # Play chess move sound when piece is successfully moved
            self.sound_manager.play_move_sound()
            
            self.moveHighlight = self.view.SquareHighlight(toSquare.x(), toSquare.y(), color)
            self.view.addHighlight(self.moveHighlight)
            self.view.highlightChecks()
            # Remove highlights of next player
            if self.algorithm.currentPlayer == self.algorithm.Red:
                color = QColor('#33bf3b43')
            elif self.algorithm.currentPlayer == self.algorithm.Blue:
                color = QColor('#334185bf')
            elif self.algorithm.currentPlayer == self.algorithm.Yellow:
                color = QColor('#33c09526')
            elif self.algorithm.currentPlayer == self.algorithm.Green:
                color = QColor('#334e9161')
            else:
                color = QColor('#00000000')
            self.view.removeHighlightsOfColor(color)
            self.moveHighlight = 0
        self.selectedSquare = 0

    def keyPressEvent(self, event):
        """Handles arrow key press events to go to previous, next, first or last move. Also stores key modifier for View
        to draw different color arrows and squares."""
        if event.key() == Qt.Key_Left:
            self.algorithm.prevMove()
        if event.key() == Qt.Key_Right:
            self.algorithm.nextMove()
        if event.key() == Qt.Key_Up:
            self.algorithm.firstMove()
        if event.key() == Qt.Key_Down:
            self.algorithm.lastMove()
        if event.key() == Qt.Key_S:
            # Toggle sound on/off
            current_state = self.sound_manager.is_sound_enabled()
            self.sound_manager.set_sound_enabled(not current_state)
            status = "켜짐" if not current_state else "꺼짐"
            print(f"사운드: {status}")
        if event.key() == Qt.Key_B:
            # Toggle BGM on/off
            current_state = self.sound_manager.is_bgm_enabled()
            self.sound_manager.set_bgm_enabled(not current_state)
            status = "켜짐" if not current_state else "꺼짐"
            print(f"BGM: {status}")
        if event.key() == Qt.Key_M:
            # Toggle BGM pause/resume
            if self.sound_manager.bgm_player and self.sound_manager.bgm_player.state() == self.sound_manager.bgm_player.PlayingState:
                self.sound_manager.pause_bgm()
                print("BGM 일시정지")
            else:
                self.sound_manager.resume_bgm()
                print("BGM 재개")
        if event.key() == Qt.Key_Plus or event.key() == Qt.Key_Equal:
            # Increase volume
            current_volume = self.sound_manager.get_bgm_volume()
            new_volume = min(1.0, current_volume + 0.1)
            self.sound_manager.set_bgm_volume(new_volume)
            print(f"BGM 볼륨: {int(new_volume * 100)}%")
        if event.key() == Qt.Key_Minus:
            # Decrease volume
            current_volume = self.sound_manager.get_bgm_volume()
            new_volume = max(0.0, current_volume - 0.1)
            self.sound_manager.set_bgm_volume(new_volume)
            print(f"BGM 볼륨: {int(new_volume * 100)}%")
        self.view.keyModifier = event.key()

    def keyReleaseEvent(self, event):
        """Resets key modifier for View."""
        self.view.keyModifier = None

    def pgnParseError(self):
        """Shows dialog explaining the PGN4 cannot be read and settings may need to be changed."""
        pgnErrorDialog = InfoDialog()
        pgnErrorDialog.setWindowTitle('PGN4 parse error')
        pgnErrorDialog.label.setText("""
                    <center>
                    <p><b>Cannot read PGN4!</b></p>
                    <p>If you are trying to load a chess.com PGN4, please make sure the checkbox in settings is 
                    <i>checked</i>. If not, make sure it is <i>unchecked</i>. You can only load a Teams variant PGN4. 
                    FFA is not supported. If the issue remains, please report it.
                    </p>
                    </center>
                    """)
        pgnErrorDialog.exec_()

    def openFileNameDialog(self):
        """Shows file dialog to load a game from a PGN4 file."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        # noinspection PyCallByClass,PyTypeChecker
        fileName, _ = QFileDialog.getOpenFileName(self, "Load Game", "data/games/",
                                                  "PGN4 Files (*.pgn4)", options=options)
        if fileName:
            with open(fileName, 'r') as file:
                pgn4 = ''.join(file.readlines())
                self.pgnField.setPlainText(pgn4)
                if SETTINGS.value('chesscom'):
                    loaded = self.algorithm.parseChesscomPgn4(pgn4)
                else:
                    loaded = self.algorithm.parsePgn4(pgn4)
                if loaded:
                    self.statusbar.showMessage('Game loaded successfully.', 5000)

    def saveFileDialog(self):
        """Shows file dialog to save a game to a PGN4 file."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        # noinspection PyTypeChecker,PyCallByClass
        fileName, _ = QFileDialog.getSaveFileName(self, "Save Game", "data/games/",
                                                  "PGN4 Files (*.pgn4)", options=options)
        if fileName:
            ext = '.pgn4'
            if ext not in fileName:
                fileName += ext
            with open(fileName, 'w') as file:
                pgn4 = self.pgnField.toPlainText()
                file.writelines(pgn4)
                self.statusbar.showMessage('Game saved.', 5000)

    def setFen4(self):
        """Gets FEN4 from the text field to set the board accordingly."""
        fen4 = self.fenField.toPlainText()
        self.algorithm.setBoardState(fen4)
        self.moveListWidget.clear()
        self.resetComment()
        self.view.repaint()  # Forced repaint

    def setMoveComment(self, comment=True):
        """Saves comment for current move."""
        if comment:
            text = self.commentField.toPlainText()
            text = text.replace('\n', ' ')
            self.algorithm.currentMove.comment = text
        else:
            self.algorithm.currentMove.comment = None

    def editComment(self):
        """Activates comment edit field."""
        if self.algorithm.currentMove.comment:
            self.commentField.setPlainText(self.algorithm.currentMove.comment)
            self.commentField.selectAll()
        else:
            self.commentField.clear()
        self.comment.setHidden(True)
        self.commentField.setFocus(True)

    def setComment(self):
        """Updates comment and deactivates comment edit field."""
        if self.commentField.toPlainText():
            self.comment.setText(self.commentField.toPlainText())
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: black;
                font-family: Trebuchet MS;
                """)
            self.setMoveComment()
            self.algorithm.updateMoveText()
            self.algorithm.getPgn4()
        else:
            if self.algorithm.currentMove.name != 'root':
                self.comment.setText('Enter comment for this move...')
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: grey;
                font-family: Trebuchet MS;
                """)
            self.setMoveComment(False)
        self.comment.setHidden(False)

    def resetComment(self):
        """Resets move comment."""
        self.comment.setText('')
        self.comment.setEnabled(False)
        self.commentField.clear()
        self.comment.setStyleSheet("""
            border: 0px;
            padding: 4px;
            border-radius: 0px;
            background-color: white;
            text-align: top left;
            color: grey;
            font-family: Trebuchet MS;
            """)

    def showComment(self, node):
        """Shows comment for current move."""
        if node.comment:
            self.comment.setText(node.comment)
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: black;
                font-family: Trebuchet MS;
                """)
        else:
            if node.name != 'root':
                self.comment.setText('Enter comment for this move...')
            self.comment.setStyleSheet("""
                border: 0px;
                padding: 4px;
                border-radius: 0px;
                background-color: white;
                text-align: top left;
                color: grey;
                font-family: Trebuchet MS;
                """)

    def show_game_over(self, result):
        """Show game over popup with the result and countdown in a single dialog."""
        if result == self.algorithm.Team1Wins:
            result_message = "Team 1 (Red & Yellow) wins by checkmate!"
        elif result == self.algorithm.Team2Wins:
            result_message = "Team 2 (Blue & Green) wins by checkmate!"
        elif result == self.algorithm.Team1Wins_Timeout:
            result_message = "Team 1 (Red & Yellow) wins by Timeout!"
        elif result == self.algorithm.Team2Wins_Timeout:
            result_message = "Team 2 (Blue & Green) wins by Timeout!"
        else:
            result_message = "Draw by Stalemate!"
            
        # 디버깅을 위한 로그 출력
        print(f"Game Over: {result}")
        
        # 게임 결과와 카운트다운을 함께 표시하는 팝업창 생성
        self.countdown_dialog = QMessageBox(self)
        self.countdown_dialog.setWindowTitle("게임 종료")
        self.countdown_dialog.setIcon(QMessageBox.Information)
        self.countdown_dialog.setStandardButtons(QMessageBox.NoButton)  # 버튼 없음
        
        # 창 크기 설정 (더 크게)
        self.countdown_dialog.resize(600, 400)
        
        # 글씨 크기 설정을 위한 스타일시트 적용
        self.countdown_dialog.setStyleSheet("""
            QMessageBox {
                font-size: 18px;
                font-weight: bold;
            }
            QMessageBox QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #333333;
                padding: 20px;
                line-height: 1.5;
            }
        """)
        
        # 카운트다운 타이머 설정 (더 오래 표시)
        self.countdown_seconds = 8  # 3초에서 8초로 증가
        self.countdown_timer = QTimer(self)
        self.countdown_timer.timeout.connect(self.update_countdown)
        self.countdown_timer.start(1000)  # 1초마다 업데이트
        
        # 게임 결과 메시지를 인스턴스 변수로 저장
        self.result_message = result_message
        
        # 초기 메시지 설정 (게임 결과 + 카운트다운)
        self.update_countdown()
        
        # 8초 후 게임 종료 (3초에서 8초로 증가)
        print("게임이 8초 후에 자동으로 종료됩니다...")
        self.game_exit_timer.start(8000)  # 8초 = 8000ms

    def update_countdown(self):
        """카운트다운을 업데이트합니다."""
        if self.countdown_seconds > 0:
            full_message = f"{self.result_message}\n\n{self.countdown_seconds}초 후 게임을 종료합니다..."
            self.countdown_dialog.setText(full_message)
            self.countdown_dialog.show()
            self.countdown_seconds -= 1
        else:
            self.countdown_timer.stop()
            self.countdown_dialog.close()

    def show_promotion_dialog(self, player_color, file, rank):
        """폰 승진 다이얼로그를 표시합니다."""
        dialog = PromotionDialog(player_color, self)
        dialog.pieceSelected.connect(self.handle_promotion_selection)
        dialog.exec_()
        
    def handle_promotion_selection(self, piece_code):
        """폰 승진 선택을 처리합니다."""
        self.algorithm.promoteValue(piece_code)


class Preferences(QDialog, Ui_Preferences):
    """The preferences dialog. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.initialize()

        # Connect button actions
        self.buttonBox.accepted.connect(self.save)
        self.buttonBox.button(QDialogButtonBox.RestoreDefaults).clicked.connect(self.restoreDefaults)

    def initialize(self):
        """Sets preferences to saved values. Sets default values if no preferences saved."""
        self.showcoordinates.setChecked(strtobool(str(SETTINGS.value('showcoordinates', False))))
        self.showlegalmoves.setChecked(strtobool(str(SETTINGS.value('showlegalmoves', False))))
        self.coordinatehelp.setChecked(strtobool(str(SETTINGS.value('coordinatehelp', False))))
        self.shownames.setChecked(strtobool(str(SETTINGS.value('shownames', False))))
        self.autocolor.setChecked(strtobool(str(SETTINGS.value('autocolor', False))))
        self.autorotate.setChecked(strtobool(str(SETTINGS.value('autorotate', False))))
        self.chesscom.setChecked(strtobool(str(SETTINGS.value('chesscom', False))))

    def save(self):
        """Saves preferences."""
        SETTINGS.setValue('showcoordinates', self.showcoordinates.isChecked())
        SETTINGS.setValue('showlegalmoves', self.showlegalmoves.isChecked())
        SETTINGS.setValue('coordinatehelp', self.coordinatehelp.isChecked())
        SETTINGS.setValue('shownames', self.shownames.isChecked())
        SETTINGS.setValue('autocolor', self.autocolor.isChecked())
        SETTINGS.setValue('autorotate', self.autorotate.isChecked())
        SETTINGS.setValue('chesscom', self.chesscom.isChecked())

    def restoreDefaults(self):
        """Restores default preferences."""
        self.showcoordinates.setChecked(False)
        self.showlegalmoves.setChecked(False)
        self.coordinatehelp.setChecked(False)
        self.shownames.setChecked(False)
        self.autocolor.setChecked(False)
        self.autorotate.setChecked(False)
        self.chesscom.setChecked(False)


class InfoDialog(QDialog, Ui_InfoDialog):
    """The application info dialog. The imported UI code is generated by PyQt5 from reading the Qt Creator .ui file."""
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def paintEvent(self, event):
        """Implements paintEvent() method."""
        painter = QPainter()
        painter.begin(self)
        icon = QIcon('resources/img/icon.svg')
        width = 80
        height = 80
        x = (self.width() - width) / 2
        y = 20
        rect = QRect(x, y, width, height)
        icon.paint(painter, rect, Qt.AlignCenter)
        painter.end()
